// ‚úÖ FULL REWRITE ‚Äî Dual scheduler with quota balance (Playlists @09:05, Tracks @14:00)

import cron from 'node-cron';
import { runFetchPlaylists } from '../jobs/fetchPlaylists.js';
import { runFetchTracks } from '../jobs/fetchTracksFromPlaylist.js';

// üïò 09:05 lokalno = 07:05 UTC
const PLAYLIST_SCHEDULE = '5 7 * * *';
// üïë 14:00 lokalno = 12:00 UTC
const TRACK_SCHEDULE = '0 12 * * *';

// üöÄ Start oba dnevna joba
export function startDualJobs() {
  console.log('[scheduler:init] dual cron scheduler starting...');
  console.log('[scheduler:init] playlists ‚Üí 09:05 local (07:05 UTC)');
  console.log('[scheduler:init] tracks ‚Üí 14:00 local (12:00 UTC)');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

  // üéß Playlists fetch job
  cron.schedule(
    PLAYLIST_SCHEDULE,
    async () => {
      const now = new Date().toISOString();
      console.log(`\n[scheduler] ‚ñ∂ ${now} ‚Üí Starting Playlists Fetch`);
      try {
        await runFetchPlaylists({ reason: 'daily-playlists' });
        console.log('[scheduler] ‚úÖ Playlists job finished successfully.');
      } catch (e) {
        console.error('[scheduler] ‚ùå playlists job error:', e.message || e);
      }
    },
    { timezone: 'UTC' }
  );

  // üéµ Tracks fetch job
  cron.schedule(
    TRACK_SCHEDULE,
    async () => {
      const now = new Date().toISOString();
      console.log(`\n[scheduler] ‚ñ∂ ${now} ‚Üí Starting Tracks Fetch`);
      try {
        await runFetchTracks({ reason: 'daily-tracks' });
        console.log('[scheduler] ‚úÖ Tracks job finished successfully.');
      } catch (e) {
        console.error('[scheduler] ‚ùå tracks job error:', e.message || e);
      }
    },
    { timezone: 'UTC' }
  );

  console.log(
    '[scheduler] cron set ‚Üí playlists@07:05 UTC (09:05 local), tracks@12:00 UTC (14:00 local)\n'
  );
}
